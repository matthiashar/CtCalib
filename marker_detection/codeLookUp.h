#ifndef CODELOOKUP_H
#define CODELOOKUP_H

#include <utility>

// https://stackoverflow.com/questions/26075969/compile-time-map-and-inverse-map-values
using Item = std::pair<int, int>;
constexpr Item map_items[] = {
    { 129 , 1 },
    { 135 , 2 },
    { 139 , 3 },
    { 141 , 4 },
    { 147 , 5 },
    { 149 , 6 },
    { 153 , 7 },
    { 159 , 8 },
    { 163 , 9 },
    { 165 , 10 },
    { 169 , 11 },
    { 175 , 12 },
    { 177 , 13 },
    { 183 , 14 },
    { 187 , 15 },
    { 189 , 16 },
    { 195 , 17 },
    { 197 , 18 },
    { 201 , 19 },
    { 207 , 20 },
    { 209 , 21 },
    { 215 , 22 },
    { 219 , 23 },
    { 221 , 24 },
    { 225 , 25 },
    { 231 , 26 },
    { 235 , 27 },
    { 237 , 28 },
    { 243 , 29 },
    { 245 , 30 },
    { 249 , 31 },
    { 255 , 32 },
    { 263 , 33 },
    { 267 , 34 },
    { 275 , 35 },
    { 287 , 36 },
    { 291 , 37 },
    { 303 , 38 },
    { 311 , 39 },
    { 315 , 40 },
    { 323 , 41 },
    { 335 , 42 },
    { 343 , 43 },
    { 347 , 44 },
    { 359 , 45 },
    { 363 , 46 },
    { 371 , 47 },
    { 383 , 48 },
    { 387 , 49 },
    { 389 , 50 },
    { 393 , 51 },
    { 399 , 52 },
    { 401 , 53 },
    { 407 , 54 },
    { 411 , 55 },
    { 413 , 56 },
    { 417 , 57 },
    { 423 , 58 },
    { 427 , 59 },
    { 429 , 60 },
    { 435 , 61 },
    { 437 , 62 },
    { 441 , 63 },
    { 447 , 64 },
    { 455 , 65 },
    { 459 , 66 },
    { 461 , 67 },
    { 467 , 68 },
    { 469 , 69 },
    { 473 , 70 },
    { 479 , 71 },
    { 483 , 72 },
    { 485 , 73 },
    { 489 , 74 },
    { 495 , 75 },
    { 497 , 76 },
    { 503 , 77 },
    { 507 , 78 },
    { 509 , 79 },
    { 533 , 80 },
    { 543 , 81 },
    { 549 , 82 },
    { 559 , 83 },
    { 567 , 84 },
    { 573 , 85 },
    { 581 , 86 },
    { 591 , 87 },
    { 599 , 88 },
    { 605 , 89 },
    { 615 , 90 },
    { 621 , 91 },
    { 629 , 92 },
    { 639 , 93 },
    { 645 , 94 },
    { 649 , 95 },
    { 655 , 96 },
    { 657 , 97 },
    { 663 , 98 },
    { 667 , 99 },
    { 669 , 100 },
    { 679 , 101 },
    { 683 , 102 },
    { 685 , 103 },
    { 691 , 104 },
    { 693 , 105 },
    { 697 , 106 },
    { 703 , 107 },
    { 711 , 108 },
    { 715 , 109 },
    { 717 , 110 },
    { 723 , 111 },
    { 725 , 112 },
    { 729 , 113 },
    { 735 , 114 },
    { 739 , 115 },
    { 741 , 116 },
    { 745 , 117 },
    { 751 , 118 },
    { 753 , 119 },
    { 759 , 120 },
    { 763 , 121 },
    { 765 , 122 },
    { 783 , 123 },
    { 791 , 124 },
    { 795 , 125 },
    { 797 , 126 },
    { 807 , 127 },
    { 811 , 128 },
    { 813 , 129 },
    { 819 , 130 },
    { 821 , 131 },
    { 831 , 132 },
    { 839 , 133 },
    { 843 , 134 },
    { 845 , 135 },
    { 851 , 136 },
    { 853 , 137 },
    { 863 , 138 },
    { 867 , 139 },
    { 869 , 140 },
    { 879 , 141 },
    { 887 , 142 },
    { 891 , 143 },
    { 893 , 144 },
    { 903 , 145 },
    { 907 , 146 },
    { 909 , 147 },
    { 915 , 148 },
    { 917 , 149 },
    { 921 , 150 },
    { 927 , 151 },
    { 931 , 152 },
    { 933 , 153 },
    { 937 , 154 },
    { 943 , 155 },
    { 945 , 156 },
    { 951 , 157 },
    { 955 , 158 },
    { 957 , 159 },
    { 965 , 160 },
    { 969 , 161 },
    { 975 , 162 },
    { 977 , 163 },
    { 983 , 164 },
    { 987 , 165 },
    { 989 , 166 },
    { 999 , 167 },
    { 1003 , 168 },
    { 1005 , 169 },
    { 1011 , 170 },
    { 1013 , 171 },
    { 1017 , 172 },
    { 1023 , 173 },
    { 1097 , 174 },
    { 1103 , 175 },
    { 1115 , 176 },
    { 1117 , 177 },
    { 1131 , 178 },
    { 1133 , 179 },
    { 1145 , 180 },
    { 1151 , 181 },
    { 1161 , 182 },
    { 1167 , 183 },
    { 1175 , 184 },
    { 1179 , 185 },
    { 1181 , 186 },
    { 1191 , 187 },
    { 1195 , 188 },
    { 1197 , 189 },
    { 1203 , 190 },
    { 1205 , 191 },
    { 1209 , 192 },
    { 1215 , 193 },
    { 1223 , 194 },
    { 1227 , 195 },
    { 1229 , 196 },
    { 1235 , 197 },
    { 1237 , 198 },
    { 1241 , 199 },
    { 1247 , 200 },
    { 1251 , 201 },
    { 1253 , 202 },
    { 1257 , 203 },
    { 1263 , 204 },
    { 1271 , 205 },
    { 1275 , 206 },
    { 1277 , 207 },
    { 1303 , 208 },
    { 1307 , 209 },
    { 1309 , 210 },
    { 1319 , 211 },
    { 1323 , 212 },
    { 1325 , 213 },
    { 1331 , 214 },
    { 1337 , 215 },
    { 1343 , 216 },
    { 1351 , 217 },
    { 1355 , 218 },
    { 1357 , 219 },
    { 1363 , 220 },
    { 1369 , 221 },
    { 1375 , 222 },
    { 1379 , 223 },
    { 1385 , 224 },
    { 1391 , 225 },
    { 1399 , 226 },
    { 1403 , 227 },
    { 1405 , 228 },
    { 1419 , 229 },
    { 1421 , 230 },
    { 1427 , 231 },
    { 1429 , 232 },
    { 1433 , 233 },
    { 1439 , 234 },
    { 1443 , 235 },
    { 1445 , 236 },
    { 1449 , 237 },
    { 1455 , 238 },
    { 1463 , 239 },
    { 1467 , 240 },
    { 1469 , 241 },
    { 1481 , 242 },
    { 1487 , 243 },
    { 1495 , 244 },
    { 1499 , 245 },
    { 1501 , 246 },
    { 1511 , 247 },
    { 1515 , 248 },
    { 1517 , 249 },
    { 1523 , 250 },
    { 1525 , 251 },
    { 1529 , 252 },
    { 1535 , 253 },
    { 1589 , 254 },
    { 1593 , 255 },
    { 1599 , 256 },
    { 1607 , 257 },
    { 1611 , 258 },
    { 1613 , 259 },
    { 1621 , 260 },
    { 1625 , 261 },
    { 1631 , 262 },
    { 1637 , 263 },
    { 1641 , 264 },
    { 1647 , 265 },
    { 1655 , 266 },
    { 1659 , 267 },
    { 1661 , 268 },
    { 1677 , 269 },
    { 1683 , 270 },
    { 1685 , 271 },
    { 1689 , 272 },
    { 1695 , 273 },
    { 1701 , 274 },
    { 1705 , 275 },
    { 1711 , 276 },
    { 1719 , 277 },
    { 1723 , 278 },
    { 1725 , 279 },
    { 1737 , 280 },
    { 1743 , 281 },
    { 1751 , 282 },
    { 1755 , 283 },
    { 1757 , 284 },
    { 1767 , 285 },
    { 1771 , 286 },
    { 1773 , 287 },
    { 1779 , 288 },
    { 1781 , 289 },
    { 1785 , 290 },
    { 1791 , 291 },
    { 1823 , 292 },
    { 1829 , 293 },
    { 1833 , 294 },
    { 1839 , 295 },
    { 1847 , 296 },
    { 1851 , 297 },
    { 1853 , 298 },
    { 1865 , 299 },
    { 1871 , 300 },
    { 1879 , 301 },
    { 1883 , 302 },
    { 1885 , 303 },
    { 1895 , 304 },
    { 1899 , 305 },
    { 1901 , 306 },
    { 1907 , 307 },
    { 1909 , 308 },
    { 1913 , 309 },
    { 1919 , 310 },
    { 1935 , 311 },
    { 1943 , 312 },
    { 1947 , 313 },
    { 1949 , 314 },
    { 1959 , 315 },
    { 1963 , 316 },
    { 1965 , 317 },
    { 1971 , 318 },
    { 1973 , 319 },
    { 1977 , 320 },
    { 1983 , 321 },
    { 1995 , 322 },
    { 1997 , 323 },
    { 2003 , 324 },
    { 2005 , 325 },
    { 2009 , 326 },
    { 2015 , 327 },
    { 2021 , 328 },
    { 2025 , 329 },
    { 2031 , 330 },
    { 2039 , 331 },
    { 2043 , 332 },
    { 2045 , 333 },
    { 2343 , 334 },
    { 2347 , 335 },
    { 2355 , 336 },
    { 2357 , 337 },
    { 2367 , 338 },
    { 2379 , 339 },
    { 2387 , 340 },
    { 2389 , 341 },
    { 2399 , 342 },
    { 2415 , 343 },
    { 2423 , 344 },
    { 2427 , 345 },
    { 2429 , 346 },
    { 2451 , 347 },
    { 2453 , 348 },
    { 2463 , 349 },
    { 2469 , 350 },
    { 2479 , 351 },
    { 2487 , 352 },
    { 2491 , 353 },
    { 2493 , 354 },
    { 2511 , 355 },
    { 2519 , 356 },
    { 2523 , 357 },
    { 2525 , 358 },
    { 2535 , 359 },
    { 2539 , 360 },
    { 2541 , 361 },
    { 2547 , 362 },
    { 2549 , 363 },
    { 2559 , 364 },
    { 2643 , 365 },
    { 2645 , 366 },
    { 2655 , 367 },
    { 2671 , 368 },
    { 2679 , 369 },
    { 2683 , 370 },
    { 2685 , 371 },
    { 2709 , 372 },
    { 2719 , 373 },
    { 2735 , 374 },
    { 2743 , 375 },
    { 2747 , 376 },
    { 2749 , 377 },
    { 2767 , 378 },
    { 2775 , 379 },
    { 2779 , 380 },
    { 2781 , 381 },
    { 2791 , 382 },
    { 2795 , 383 },
    { 2797 , 384 },
    { 2803 , 385 },
    { 2805 , 386 },
    { 2815 , 387 },
    { 2863 , 388 },
    { 2871 , 389 },
    { 2875 , 390 },
    { 2877 , 391 },
    { 2895 , 392 },
    { 2903 , 393 },
    { 2907 , 394 },
    { 2909 , 395 },
    { 2919 , 396 },
    { 2923 , 397 },
    { 2925 , 398 },
    { 2931 , 399 },
    { 2933 , 400 },
    { 2943 , 401 },
    { 2967 , 402 },
    { 2971 , 403 },
    { 2973 , 404 },
    { 2983 , 405 },
    { 2987 , 406 },
    { 2989 , 407 },
    { 2995 , 408 },
    { 2997 , 409 },
    { 3007 , 410 },
    { 3021 , 411 },
    { 3027 , 412 },
    { 3029 , 413 },
    { 3039 , 414 },
    { 3055 , 415 },
    { 3063 , 416 },
    { 3067 , 417 },
    { 3069 , 418 },
    { 3279 , 419 },
    { 3287 , 420 },
    { 3291 , 421 },
    { 3293 , 422 },
    { 3303 , 423 },
    { 3307 , 424 },
    { 3309 , 425 },
    { 3317 , 426 },
    { 3327 , 427 },
    { 3383 , 428 },
    { 3387 , 429 },
    { 3389 , 430 },
    { 3407 , 431 },
    { 3415 , 432 },
    { 3419 , 433 },
    { 3421 , 434 },
    { 3431 , 435 },
    { 3435 , 436 },
    { 3437 , 437 },
    { 3445 , 438 },
    { 3455 , 439 },
    { 3483 , 440 },
    { 3485 , 441 },
    { 3495 , 442 },
    { 3499 , 443 },
    { 3501 , 444 },
    { 3509 , 445 },
    { 3519 , 446 },
    { 3541 , 447 },
    { 3551 , 448 },
    { 3567 , 449 },
    { 3575 , 450 },
    { 3579 , 451 },
    { 3581 , 452 },
    { 3701 , 453 },
    { 3711 , 454 },
    { 3741 , 455 },
    { 3755 , 456 },
    { 3757 , 457 },
    { 3765 , 458 },
    { 3775 , 459 },
    { 3797 , 460 },
    { 3807 , 461 },
    { 3823 , 462 },
    { 3831 , 463 },
    { 3835 , 464 },
    { 3837 , 465 },
    { 3903 , 466 },
    { 3925 , 467 },
    { 3935 , 468 },
    { 3951 , 469 },
    { 3959 , 470 },
    { 3963 , 471 },
    { 3965 , 472 },
    { 3999 , 473 },
    { 4015 , 474 },
    { 4023 , 475 },
    { 4027 , 476 },
    { 4029 , 477 },
    { 4055 , 478 },
    { 4059 , 479 },
    { 4061 , 480 },
    { 4075 , 481 },
    { 4077 , 482 },
    { 4085 , 483 },
    { 4095 , 484 },
    { 5463 , 485 },
    { 5467 , 486 },
    { 5483 , 487 },
    { 5503 , 488 },
    { 5547 , 489 },
    { 5567 , 490 },
    { 5599 , 491 },
    { 5615 , 492 },
    { 5623 , 493 },
    { 5627 , 494 },
    { 5823 , 495 },
    { 5855 , 496 },
    { 5871 , 497 },
    { 5879 , 498 },
    { 5883 , 499 },
    { 5983 , 500 },
    { 5999 , 501 },
    { 6007 , 502 },
    { 6011 , 503 },
    { 6063 , 504 },
    { 6071 , 505 },
    { 6075 , 506 },
    { 6107 , 507 },
    { 6143 , 508 },
    { 7023 , 509 },
    { 7031 , 510 },
    { 7095 , 511 },
    { 7167 , 512 },
};
constexpr auto map_size = sizeof map_items/sizeof map_items[0];

static constexpr int findValue(int key, int range = map_size) {
    return
            (range == 0) ? -1:
                           (map_items[range - 1].first == key) ? map_items[range - 1].second:
        findValue(key, range - 1);
    };

#endif // CODELOOKUP_H
